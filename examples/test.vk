;quiz language


(define y-equals-mx-plus-b
  (expression
    (equality)
    (terms
      (variable (bind 'y))
    )
    (terms
      (op+
        (op*
          (constant integer)
          (variable (bind 'x))
        )
        (constant integer)
      )
    )
  )
)

;(print (expression-bindings y-equals-mx-plus-b))
;(print (bound-term-ident (caar (expression-bindings y-equals-mx-plus-b))))


(define test
  (expression
    (equality)
    (terms
      ((random-permute op+ op-)
        (variable)
        (constant integer)
      )
    )
    (terms
      (constant integer #f 0)
    )
  )
)

(define t
  (terms
    ((random-permute op+ op-)
      (constant integer)
      ((random-permute op* op/)
        (variable)
        (variable)
      )
    )
  )
)

(define exp2
  (expression
    (equality)
    t
    (terms ((random-permute op+ op+ op-) (constant integer)))
  )
)

;(print (expression-plist exp2))
;(print (expression-pnum exp2))

;(print (extract-expression exp2))

;(print (resolve-permutations exp2 1))


;(print (extract-expression test))
;(print (expression-plist test))
;(define r (resolve-permutations test 1))

;(print (extract-expression exp2))
;(print (expression-plist exp2))
;(define r2 (resolve-permutations exp2 1))

;(print (extract-expression r))
;(print (extract-expression r2))

(define exp3
  (expression
    (equality)
    (terms
      (op+
        ((random-permute (constant integer) (variable)))
        (constant integer)
      )
    )
    (terms
      (constant integer)
    )
  )
)

(print (extract-expression (resolve-permutations exp3 0)))



(define exp4
  (expression
    (equality)
    (terms
      ((random-permute (op+ (constant integer) (variable)) (op- (variable) (variable) (variable))))
    )
    (terms
      (constant integer #f 0)
    )
  )
)

(define i (generate y-equals-mx-plus-b))
